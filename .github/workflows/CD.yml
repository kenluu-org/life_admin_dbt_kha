name: CD on main push

on:

  workflow_dispatch:

  pull_request:
    types:
      - closed
    branches:
      - main

permissions:
  contents: write
jobs:
  deploy:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Required for git diff to work properly
          token: ${{ secrets.GITHUB_TOKEN }} # Required for pushing changes


      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install python deps
        run: uv sync
        
      - name: Decode SA Key
        # This is a more secure way to decode the secret, as it avoids exposing it in the logs.
        run: echo "${{ secrets.DBT_BQ_KEYFILE_JSON }}" | base64 --decode > sa.json


      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Get lightdash version 
        uses: sergeysova/jq-action@v2
        id: version 
        env:
          LIGHTDASH_URL: ${{ secrets.LIGHTDASH_URL }}   
        with: 
          cmd: curl -s "${LIGHTDASH_URL}/api/v1/health" | jq -r '.results.version'

      - name: Install npm dependencies
        run: bun install -g "@lightdash/cli@${{ steps.version.outputs.value }}" || bun install -g @lightdash/cli@latest

      - name: dbt deploy
        env:
          DBT_PROFILES_DIR: .
          DBT_TARGET: "prod"
          GCS_KEY: ${{ secrets.GCS_KEY }}
          GCS_SECRET: ${{ secrets.GCS_SECRET }}
          DBT_BQ_LOCATION: ${{ secrets.DBT_BQ_LOCATION }}
          DBT_BQ_PROJECT: ${{ secrets.DBT_BQ_PROJECT }}
        run: source .venv/bin/activate && dbt deps && dbt build

      - name: Set var DBT_CI_SCHEMA
        run: echo "DBT_CI_SCHEMA=PR_${{ github.event.number }}" >> $GITHUB_ENV

      - name: drop dbt CI schema
        env: 
          DBT_CI_SCHEMA: ${{ env.DBT_CI_SCHEMA }}
        run: source .venv/bin/activate && dbt run-operation drop_ci_schema
        
      - name: lightdash deploy
        env:
          LIGHTDASH_API_KEY: ${{ secrets.LIGHTDASH_API_KEY }}
          LIGHTDASH_PROJECT: ${{ secrets.LIGHTDASH_PROJECT }}
          LIGHTDASH_URL: ${{ secrets.LIGHTDASH_URL }}
          DBT_PROFILES_DIR: .
          DBT_TARGET: "prod"
          GCS_KEY: ${{ secrets.GCS_KEY }}
          GCS_SECRET: ${{ secrets.GCS_SECRET }}
          DBT_BQ_LOCATION: ${{ secrets.DBT_BQ_LOCATION }}
          DBT_BQ_PROJECT: ${{ secrets.DBT_BQ_PROJECT }}
        run: source .venv/bin/activate && lightdash deploy

      - name: Upload Lightdash Content
        env:
          LIGHTDASH_API_KEY: ${{ secrets.LIGHTDASH_API_KEY }}
          LIGHTDASH_PROJECT: ${{ secrets.LIGHTDASH_PROJECT }}
          LIGHTDASH_URL: ${{ secrets.LIGHTDASH_URL }}
        run: lightdash upload --project ${{ secrets.LIGHTDASH_PROJECT }} --force

      - name: Download Lightdash Content (Post-Upload for Sync)
        env:
          LIGHTDASH_API_KEY: ${{ secrets.LIGHTDASH_API_KEY }}
          LIGHTDASH_URL: ${{ secrets.LIGHTDASH_URL }}
          LIGHTDASH_PROJECT: ${{ secrets.LIGHTDASH_PROJECT }}
        run: lightdash download --project ${{ secrets.LIGHTDASH_PROJECT }}

      - name: Commit back Lightdash content changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add lightdash/
          git diff --staged --quiet || git commit -m "chore: Sync Lightdash content from production [skip ci]"
          git push
